@model AlumniManagement.Models.DTO.MajorDTO

@{
    ViewBag.Title = "Major Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <style>
        .table-container {
            max-width: 1200px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        #majorData {
            width: 100% !important;
            table-layout: auto;
        }

            #majorData th, #majorData td {
                white-space: nowrap;
                text-align: center;
            }
    </style>
}

<h2>Major Management</h2>

<div class="d-flex justify-content-between align-items-center mb-3">
    @*<h2 class="text-primary">Faculty List</h2>*@
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-success" })
    <button id="createButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
        Add New Major Modal
    </button>
</div>

<button id="deleteSelected" class="btn btn-danger">Delete Selected</button>

<div class="table-container">
    <table class="table table-striped table-bordered" id="majorData">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll"/></th>
                <th>Actions</th>
                <th>No.</th>
                <th>Major Name</th>
                <th>Faculty Name</th>
                <th>Description</th>
                <th>Last Update</th>
            </tr>
        </thead>
    </table>

    @*Create Modal*@
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Create New Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Form Starts Here -->
                    @using (Html.BeginForm("Create", "Major", FormMethod.Post, new { id = "createForm" }))
                    {
                        @Html.AntiForgeryToken()

                        //Template location
                    <div class="form-horizontal">
                        <h4>Major Information</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            @Html.LabelFor(model => model.MajorName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MajorName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MajorName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FacultyID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FacultyID, (SelectList)ViewBag.FacultyLists, "Select Faculty",
                            new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FacultyID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "4" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @*Edit Modal*@
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Room</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("Edit", "Major", FormMethod.Post, new { id = "editForm" }))
                    {
                        @Html.AntiForgeryToken()
                        //Template Edit
                    <div class="form-horizontal">
                        <h4>Edit Major</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.MajorID)

                        <div class="form-group">
                            Name
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MajorName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MajorName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            Faculty
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FacultyID, (SelectList)ViewBag.FacultyLists, "Select Faculty", new { @class = "form-control"})
                                @Html.ValidationMessageFor(model => model.FacultyID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).ready(function () {
            var table = $('#majorData').DataTable({
                "ajax": {
                    "url": "/Major/GetMajors",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return '<input type="checkbox" class="selectCheckbox" data-id="' + row.MajorID + '"/>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            //var editLink = '@Url.Action("Edit", "Major", new { id = "PLACEHOLDER"})'.replace("PLACEHOLDER", row.MajorID);
                          return '<div class="btn-group">' +
                                '<a href="javascript:void(0);" class="btn btn-primary" data-id="' + row.MajorID + '" id="editButton" style="margin-right: 5px;">' +
                                '<i class="fas fa-edit"></i></a>' +
                                '<button class="btn btn-danger deleteButton" data-id="' + row.MajorID + '">Delete</button>' +
                                '</div>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                    { "data": "MajorName" },
                    { "data": "FacultyName" },
                    { "data": "Description" },
                    {
                        "data": "ModifiedDate",
                        "render": function (data) {
                            return moment(data).format('DD-MMM-YYYY HH:mm:ss');
                        }
                    },
                ],
                "pagingType": "full_numbers",
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                "pageLength": 10,
                "lengthMenu": [10, 25, 50, 100],
                "language": {
                    "paginate": {
                        "previous": "Previous",
                        "next": "Next",
                        "first": "<<",
                        "last": ">>"
                    }
                }
            });
        });

        $(document).on('click', '.deleteButton', function () {
            const itemId = $(this).data('id');
            Swal.fire({
                title: "Are you sure?",
                text: "This action cannot be undone!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "Cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Major/Delete',
                        type: 'POST',
                        data: { id: itemId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("Deleted!", response.message, "success").then(() => {
                                    $('#majorData').DataTable().ajax.reload();
                                });
                            } else {
                                Swal.fire("Error!", response.message, "error");
                            }
                        },
                        error: function () {
                            Swal.fire("Error!", "Could not delete the item.", "error");
                        }
                    });
                }
            });
        });

        // unbind the default search event
        var searchInput = $('#majorData_filter input');
        searchInput.unbind();
        let searchTimeout;
        searchInput.on('keyup', function () {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                var value = $(this).val();
                if (value.length >= 3 || value.length === 0) {
                    table.search(value).draw();
                }
            }, 500); // Add debounce to prevent frequent filtering
        });

        //Delete single item
        $(document).on('click', '.deleteButton', function () {
            const itemId = $(this).data('id');
            Swal.fire({
                title: "Are you sure?",
                text: "Once deleted, you will not be able to recover this item!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Major/Delete',
                        type: 'POST',
                        data: { id: itemId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("Deleted!", response.message, "success").then(() => {
                                    table.ajax.reload();
                                });
                            } else {
                                Swal.fire("Error!", response.message, "error");
                            }
                        },
                        error: function () {
                            Swal.fire("Error!", "Unable to delete the item. Please try again.", "error");
                        }
                    });
                }
            });
        });

        // Select all checkboxes
        $('#selectAll').on('click', function () {
            var rows = table.rows({ 'search': 'applied' }).nodes();
            $('input[type="checkbox"]', rows).prop('checked', this.checked);
        });

        // Delete selected rows
        $('#deleteSelected').on('click', function () {
            var selectedIds = $('.selectCheckbox:checked').map(function () {
                return $(this).data('id');
            }).get();

            if (selectedIds.length > 0) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "You will not be able to recover these items!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                    confirmButtonText: "Yes, delete them!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Major/DeleteSelected',
                            type: 'POST',
                            data: { ids: selectedIds },
                            traditional: true,
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        table.ajax.reload();
                                    });
                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                            },
                            error: function () {
                                Swal.fire("Error!", "Unable to delete the items. Please try again.", "error");
                            }
                        });
                    }
                });
            } else {
                Swal.fire("No items selected", "Please select items to delete.", "info");
            }
        });

        //Submit Create Major
        $(document).ready(function () {
            $('#createForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'), // Form action URL
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            $('#createModal').modal('hide'); // Close modal
                            $('#createForm')[0].reset(); // Reset form fields
                            $('#majorData').DataTable().ajax.reload(); // Reload DataTable
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: "Major created succesfully",
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.errorMsg,
                                showConfirmButton: true // Show OK button
                            });

                        }
                    },
                    error: function (xhr) {
                        console.error(xhr.responseText);
                        alert('An error occurred while saving.');
                    }
                });
            });
        });

        //Edit form Js
        $(document).on('click', '#editButton', function () {
            var majorID = $(this).data('id'); // Get the ProductCategoryID from the button's data-id attribute

            // Make an AJAX request to get the data for the selected ProductCategory
            $.ajax({
                url: '/Major/GetMajor/',// URL to fetch data for the specific category
                type: 'GET',
                data: { majorID: majorID },
                success: function (response) {
                    // Populate the form fields with the data returned from the server
                    $('#editForm #MajorID').val(response.MajorID); // Assuming you have a hidden field for ID
                    $('#editForm #MajorName').val(response.MajorName);
                    $('#editForm #FacultyID').val(response.FacultyID);
                    //var facultyDropdown = $("editFacultyID");
                    //facultyDropdown.empty();
                    //$.each(response.facultyLists, function (index, item) {
                    //    var option = $("<option/>").val(item.Value).text(item.Text);
                    //    if (item.Value == response.major.FacultyID) {
                    //        option.attr("selected", "selected");
                    //    }
                    //    facultyDropdown.append(option);
                    //});
                    $('#editForm #Description').val(response.Description);

                    // Show the Edit Modal
                    $('#editModal').modal('show');
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while fetching data.');
                }
            });
        });

        $('#editForm').submit(function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'), // Form action URL
                type: 'POST',
                data: $(this).serialize(), // Serialize the form data
                success: function (response) {
                    if (response.success) {
                        $('#editModal').modal('hide'); // Close the modal
                        $('#majorData').DataTable().ajax.reload(); // Reload the DataTable
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: "Edit Major Successful",
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.errorMsg,
                            showConfirmButton: true // Show OK button
                        });
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while saving.');
                }
            });
        });
    </script>
}
