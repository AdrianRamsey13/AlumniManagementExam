@model AlumniManagement.Models.DTO.AlumniDTO

@{
    ViewBag.Title = "Alumni Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <style>
        .table-container {
            max-width: 1200px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        }

        #alumniData {
            width: 100% !important;
            table-layout: auto;
        }

            #alumniData th, #alumniData td {
                white-space: nowrap;
                text-align: center;
            }
    </style>
}

<h2>Alumni</h2>
<div class="two-buttons-top">
    <div class="d-flex justify-content-between align-items-center mb-3">
        @*<h2 class="text-primary">Faculty List</h2>*@
        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-success" })
        <button id="createButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
            Add New Alumni Modal
        </button>
    </div>
    <a href="@Url.Action("AlumniExport", "Alumni")" class="btn btn-primary">
        Export Alumni To Excel
    </a>
</div>

<button id="deleteSelected" class="btn btn-danger">Delete Selected</button>

<div class="table-container">
    <table class="table table-striped table-bordered" id="alumniData">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll"/></th>
                <th>Actions</th>
                <th>No.</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Mobile Number</th>
                <th>Address</th>
                <th>Graduation Year</th>
                <th>Degree</th>
                <th>Major Name</th>
                <th>Faculty Name</th>
                <th>Last Update</th>
            </tr>
        </thead>
    </table>

    @*Create Modal*@
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Create New Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Form Starts Here -->
                    @using (Html.BeginForm("Create", "Alumni", FormMethod.Post, new { id = "createForm" }))
                    {
                        @Html.AntiForgeryToken()

                        //Template location
                        <div class="form-horizontal">
                            <h4>AlumniDTO</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.StateID, Model.States, "Select a State", new { @id = "ddlState", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.DistrictID, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.DistrictID, Enumerable.Empty<SelectListItem>(), "Select a District", new { @id = "ddlDistrict", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.DistrictID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { htmlAttributes = new { @class = "form-control", type = "date", max = DateTime.Now.ToString("yyyy-MM-dd") } })
                                    @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.GraduationYear, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.GraduationYear, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.GraduationYear, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Degree, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.Degree, Model.Degrees, "Select a Degree", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Degree, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FacultyID, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.FacultyID, Model.Faculties, "Select a Faculty", new { @id = "ddlFaculty", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.FacultyID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MajorID, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.MajorID, Enumerable.Empty<SelectListItem>(), "Select a Major", new { @id = "ddlMajor", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.MajorID, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.LinkedInProfile, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.LinkedInProfile, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LinkedInProfile, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-primary">Create</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    @*-----------*@
    @*Edit Modal*@
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Room</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("Edit", "Alumni", FormMethod.Post, new { id = "editForm" }))
                    {
                        @Html.AntiForgeryToken()
                        //Template Edit
                    <div class="form-horizontal">
                        <h4>AlumniDTO</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.StateID, Model.States, "Select a State", new { @id = "ddlState", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DistrictID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.DistrictID, Enumerable.Empty<SelectListItem>(), "Select a District", new { @id = "ddlDistrict", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DistrictID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { htmlAttributes = new { @class = "form-control", type = "date", max = DateTime.Now.ToString("yyyy-MM-dd") } })
                                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.GraduationYear, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.GraduationYear, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.GraduationYear, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Degree, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.Degree, Model.Degrees, "Select a Degree", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Degree, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FacultyID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FacultyID, Model.Faculties, "Select a Faculty", new { @id = "ddlFaculty", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FacultyID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.MajorID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.MajorID, Enumerable.Empty<SelectListItem>(), "Select a Major", new { @id = "ddlMajor", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.MajorID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LinkedInProfile, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.LinkedInProfile, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LinkedInProfile, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </div>

                    </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @*---------------*@
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).ready(function () {
            var table = $('#alumniData').DataTable({
                "ajax": {
                    "url": "/Alumni/GetAlumnis",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return '<input type="checkbox" class="selectCheckbox" data-id="' + row.AlumniID + '"/>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            var editLink = '@Url.Action("Edit", "Alumni", new { id = "PLACEHOLDER"})'.replace("PLACEHOLDER", row.AlumniID);
                            var jobLink = '@Url.Action("Index", "JobHistory", new { alumniId = "PLACEHOLDER"})'.replace("PLACEHOLDER", row.AlumniID);
                            return '<div style="display: flex; gap: 5px;">' +
                                '<a href="javascript:void(0);" class="btn btn-primary" data-id="' + row.AlumniID + '" id="editButton">Edit</a>' +
                                '<a href="/JobHistory/Index?AlumniId=' + row.AlumniID + '" class="btn btn-primary" "  style="margin-right: 5px;">' +
                                'Job History</a>' +
                                '<button class="btn btn-danger deleteButton" data-id="' + row.AlumniID + '">Delete</button>' +
                                '</div>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                    { "data": "FullName" },
                    { "data": "Email" },
                    { "data": "MobileNumber" },
                    { "data": "FullAddress" },
                    { "data": "GraduationYear" },
                    { "data": "Degree" },
                    { "data": "MajorName" },
                    { "data": "FacultyName" },
                    {
                        "data": "ModifiedDate",
                        "render": function (data) {
                            return moment(data).format('DD-MMM-YYYY HH:mm:ss');
                        }
                    },
                ],
                "dom": '<"top"f>rt<"bottom"lpi><"clear">',
                "pagingType": "full_numbers",
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                "pageLength": 10,
                "lengthMenu": [10, 25, 50, 100],
                "language": {
                    "paginate": {
                        "previous": "Previous",
                        "next": "Next",
                        "first": "<<",
                        "last": ">>"
                    }
                }
            });

            //unbind the default search event
            var searchInput = $('#alumniData_filter input');
            searchInput.unbind();
            let searchTimeout;
            searchInput.on('keyup', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    var value = $(this).val();
                    if (value.length >= 3 || value.length === 0) {
                        table.search(value).draw();
                    }
                }, 500); // Add debounce to prevent frequent filtering
            });

            //Select all checkboxes
            $('#selectAll').on('click', function () {
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input[type="checkbox"]', rows).prop('checked', this.checked);
            });

            // Delete selected rows
            $('#deleteSelected').on('click', function () {
                var selectedIds = $('.selectCheckbox:checked').map(function () {
                    return $(this).data('id');
                }).get();

                if (selectedIds.length > 0) {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You will not be able to recover these items!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#d33",
                        cancelButtonColor: "#3085d6",
                        confirmButtonText: "Yes, delete them!"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: '/Alumni/DeleteSelected',
                                type: 'POST',
                                data: { ids: selectedIds },
                                traditional: true,
                                success: function (response) {
                                    if (response.success) {
                                        Swal.fire("Deleted!", response.message, "success").then(() => {
                                            table.ajax.reload();
                                        });
                                    } else {
                                        Swal.fire("Error!", response.message, "error");
                                    }
                                },
                                error: function () {
                                    Swal.fire("Error!", "Unable to delete the items. Please try again.", "error");
                                }
                            });
                        }
                    });
                } else {
                    Swal.fire("No items selected", "Please select items to delete.", "info");
                }
            });

            //delete single item with button
            $(document).on('click', '.deleteButton', function () {
                const itemId = $(this).data('id');
                Swal.fire({
                    title: "Are you sure?",
                    text: "This action cannot be undone!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Alumni/Delete',
                            type: 'POST',
                            data: { id: itemId },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        $('#alumniData').DataTable().ajax.reload();
                                    });
                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                            },
                            error: function () {
                                Swal.fire("Error!", "Could not delete the item.", "error");
                            }
                        });
                    }
                });
            });
        });

        //Different rady function

        //Submit Create Alumni
        $(document).ready(function () {
            $('#createForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'), // Form action URL
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            $('#createModal').modal('hide'); // Close modal
                            $('#createForm')[0].reset(); // Reset form fields
                            $('#alumniData').DataTable().ajax.reload(); // Reload DataTable
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: "Alumni created succesfully",
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.errorMsg,
                                showConfirmButton: true // Show OK button
                            });

                        }
                    },
                    error: function (xhr) {
                        console.error(xhr.responseText);
                        alert('An error occurred while saving.');
                    }
                });
            });

            //Edit form Js
            $(document).on('click', '.editButton', function () { // Menggunakan class editButton
                var alumniID = $(this).data('id');

                $.ajax({
                    url: '/Alumni/GetAlumniByID/',
                    type: 'GET',
                    data: { alumniID: alumniID },
                    success: function (response) {
                        $('#editForm #AlumniID').val(response.AlumniID);
                        $('#editForm #FirstName').val(response.FirstName);
                        $('#editForm #MiddleName').val(response.MiddleName);
                        $('#editForm #Email').val(response.Email);
                        $('#editForm #MobileNumber').val(response.MobileNumber);
                        $('#editForm #Address').val(response.Address);
                        $('#editForm #StateID').val(response.stateID);
                        $('#editForm #DistrictID').val(response.DistrictID);
                        $('#editForm #DateOfBirth').val(response.DateOfBirth);
                        $('#editForm #GraduationYear').val(response.GraduationYear);
                        $('#editForm #Degree').val(response.Degree);
                        $('#editForm #FacultyID').val(response.MajorID);
                        $('#editForm #LinkedinProfile').val(response.LinkedinProfile);
                        $('#editModal').modal('show');
                    },
                    error: function (xhr) {
                        Swal.fire('Error!', 'Failed to load faculty data', 'error');
                    }
                });
            });

            // Edit Form Submission
            $('#editForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            $('#editModal').modal('hide');
                            $('#alumniData').DataTable().ajax.reload();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: "Edit Alumni Successful",
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.errorMsg,
                                showConfirmButton: true // Show OK button
                            });
                        }
                    },
                    error: function () {
                        Swal.fire('Error!', 'An error occurred', 'error');
                    }
                });
            });
        });

        $(function () {
            $('#ddlState').change(function () {
                var stateID = $(this).val();
                if (stateID) {
                    $.ajax({
                        url: '@Url.Action("GetDistrict", "Alumni")',
                        type: 'GET',
                        data: { stateID: stateID },
                        dataType: 'json',
                        success: function (data) {
                            $('#ddlDistrict').empty(); // Clear existing options
                            $('#ddlDistrict').append($('<option>').text('Select a District').val(''));
                            $.each(data, function (i, item) {
                                $('#ddlDistrict').append($('<option>').text(item.DistrictName).val(item.DistrictID));
                            });
                        },
                        error: function(xhr, status, error) {
                            console.error(xhr.responseText); // Log any errors to console
                        }
                    });
                } else {
                    $('#ddlDistrict').empty(); // Clear existing options
                    $('#ddlDistrict').append($('<option>').text('Select a District').val(''));
                }
            });
        });
        $(function () {
            $('#ddlFaculty').change(function () {
                var facultyID = $(this).val();
                if (facultyID) {
                    $.ajax({
                        url: '@Url.Action("GetMajor", "Alumni")',
                        type: 'GET',
                        data: { facultyID: facultyID },
                        dataType: 'json',
                        success: function (data) {
                            $('#ddlMajor').empty(); // Clear existing options
                            $('#ddlMajor').append($('<option>').text('Select a Major').val(''));
                            $.each(data, function (i, item) {
                                $('#ddlMajor').append($('<option>').text(item.MajorName).val(item.MajorID));
                            });
                        },
                        error: function(xhr, status, error) {
                            console.error(xhr.responseText); // Log any errors to console
                        }
                    });
                } else {
                    $('#ddlMajor').empty(); // Clear existing options
                    $('#ddlMajor').append($('<option>').text('Select a Major').val(''));
                }
            });
        });

    </script>
}